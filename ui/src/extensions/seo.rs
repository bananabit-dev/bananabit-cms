use dioxus::prelude::*;
use super::{Extension, ExtensionRoute, ExtensionComponent};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// SEO metadata structure
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct SeoMeta {
    pub title: String,
    pub description: String,
    pub keywords: String,
    pub og_title: Option<String>,
    pub og_description: Option<String>,
    pub og_image: Option<String>,
    pub canonical_url: Option<String>,
    pub robots: String, // "index,follow", "noindex,nofollow", etc.
    pub lang: String,
    pub author: Option<String>,
}

impl Default for SeoMeta {
    fn default() -> Self {
        Self {
            title: "BananaBit CMS".to_string(),
            description: "Modern, extension-based content management system".to_string(),
            keywords: "cms, content management, rust, dioxus".to_string(),
            og_title: None,
            og_description: None,
            og_image: None,
            canonical_url: None,
            robots: "index,follow".to_string(),
            lang: "en".to_string(),
            author: None,
        }
    }
}

/// Sitemap entry
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SitemapEntry {
    pub url: String,
    pub last_modified: String,
    pub change_frequency: String, // always, hourly, daily, weekly, monthly, yearly, never
    pub priority: f32, // 0.0 to 1.0
}

/// SEO extension for search engine optimization
pub struct SeoExtension {
    page_meta: HashMap<String, SeoMeta>, // url -> meta
    sitemap_entries: Vec<SitemapEntry>,
    global_meta: SeoMeta,
}

impl SeoExtension {
    pub fn new() -> Self {
        Self {
            page_meta: HashMap::new(),
            sitemap_entries: Vec::new(),
            global_meta: SeoMeta::default(),
        }
    }
    
    pub fn set_page_meta(&mut self, url: &str, meta: SeoMeta) {
        self.page_meta.insert(url.to_string(), meta);
    }
    
    pub fn get_page_meta(&self, url: &str) -> SeoMeta {
        self.page_meta.get(url).cloned().unwrap_or_else(|| self.global_meta.clone())
    }
    
    pub fn set_global_meta(&mut self, meta: SeoMeta) {
        self.global_meta = meta;
    }
    
    pub fn add_sitemap_entry(&mut self, entry: SitemapEntry) {
        self.sitemap_entries.push(entry);
    }
    
    pub fn generate_sitemap_xml(&self) -> String {
        let mut xml = String::from(r#"<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
"#);
        
        for entry in &self.sitemap_entries {
            xml.push_str(&format!(
                r#"  <url>
    <loc>{}</loc>
    <lastmod>{}</lastmod>
    <changefreq>{}</changefreq>
    <priority>{:.1}</priority>
  </url>
"#,
                entry.url, entry.last_modified, entry.change_frequency, entry.priority
            ));
        }
        
        xml.push_str("</urlset>");
        xml
    }
    
    pub fn generate_robots_txt(&self) -> String {
        format!(
            r#"User-agent: *
Allow: /

Sitemap: /sitemap.xml

# Common crawl patterns
Disallow: /admin/
Disallow: /api/
Disallow: /*.json$
Disallow: /uploads/private/

# Generated by BananaBit CMS
"#
        )
    }
}

impl Extension for SeoExtension {
    fn id(&self) -> &'static str {
        "core.seo"
    }
    
    fn name(&self) -> &'static str {
        "SEO & Analytics"
    }
    
    fn version(&self) -> &'static str {
        "1.0.0"
    }
    
    fn init(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        // Add default sitemap entries
        self.add_sitemap_entry(SitemapEntry {
            url: "https://bananabit.dev/".to_string(),
            last_modified: chrono::Utc::now().format("%Y-%m-%d").to_string(),
            change_frequency: "daily".to_string(),
            priority: 1.0,
        });
        
        self.add_sitemap_entry(SitemapEntry {
            url: "https://bananabit.dev/post/welcome-to-bananabit-cms".to_string(),
            last_modified: chrono::Utc::now().format("%Y-%m-%d").to_string(),
            change_frequency: "monthly".to_string(),
            priority: 0.8,
        });
        
        // Set page-specific meta
        let post_meta = SeoMeta {
            title: "Welcome to BananaBit CMS".to_string(),
            description: "Discover the power of our modern, extension-based content management system built with Rust and Dioxus.".to_string(),
            keywords: "cms, rust, dioxus, content management, blogging".to_string(),
            og_title: Some("Welcome to BananaBit CMS".to_string()),
            og_description: Some("Modern, extension-based content management system".to_string()),
            og_image: Some("/uploads/bananabit-logo.png".to_string()),
            canonical_url: Some("https://bananabit.dev/post/welcome-to-bananabit-cms".to_string()),
            robots: "index,follow".to_string(),
            lang: "en".to_string(),
            author: Some("BananaBit Team".to_string()),
        };
        
        self.set_page_meta("/post/welcome-to-bananabit-cms", post_meta);
        
        Ok(())
    }
    
    fn routes(&self) -> Vec<ExtensionRoute> {
        vec![
            ExtensionRoute {
                path: "/admin/seo".to_string(),
                requires_auth: true,
                admin_only: false,
            },
            ExtensionRoute {
                path: "/sitemap.xml".to_string(),
                requires_auth: false,
                admin_only: false,
            },
            ExtensionRoute {
                path: "/robots.txt".to_string(),
                requires_auth: false,
                admin_only: false,
            },
        ]
    }
    
    fn components(&self) -> Vec<ExtensionComponent> {
        vec![
            ExtensionComponent {
                name: "SeoManager".to_string(),
                description: "Manage SEO settings and metadata".to_string(),
            },
            ExtensionComponent {
                name: "MetaTags".to_string(),
                description: "Render meta tags for pages".to_string(),
            },
            ExtensionComponent {
                name: "SeoAnalytics".to_string(),
                description: "SEO performance analytics".to_string(),
            },
        ]
    }
}

/// SEO manager component for admin
#[component]
pub fn SeoManager() -> Element {
    rsx! {
        div {
            h2 { "SEO & Analytics" }
            p { "Manage search engine optimization settings, meta tags, and analytics for your site." }
            
            div {
                div {
                    button { "General Settings" }
                    button { "Page Meta" }
                    button { "Sitemap" }
                    button { "Analytics" }
                }
                
                div {
                    div {
                        h3 { "Global SEO Settings" }
                        
                        div {
                            div {
                                label { "Site Title" }
                                input {
                                    r#type: "text",
                                    value: "BananaBit CMS",
                                    placeholder: "Your site title"
                                }
                            }
                            
                            div {
                                label { "Site Description" }
                                textarea {
                                    placeholder: "Brief description of your site",
                                    rows: "3",
                                    "Modern, extension-based content management system built with Rust and Dioxus."
                                }
                            }
                            
                            div {
                                label { "Keywords" }
                                input {
                                    r#type: "text",
                                    value: "cms, rust, dioxus, content management",
                                    placeholder: "Comma-separated keywords"
                                }
                            }
                            
                            div {
                                div {
                                    label { "Default Language" }
                                    select {
                                        option { value: "en", "English" }
                                        option { value: "es", "Spanish" }
                                        option { value: "fr", "French" }
                                        option { value: "de", "German" }
                                    }
                                }
                                
                                div {
                                    label { "Robots Default" }
                                    select {
                                        option { value: "index,follow", "Index, Follow" }
                                        option { value: "noindex,nofollow", "No Index, No Follow" }
                                        option { value: "index,nofollow", "Index, No Follow" }
                                        option { value: "noindex,follow", "No Index, Follow" }
                                    }
                                }
                            }
                        }
                        
                        h3 { "Open Graph Settings" }
                        div {
                            div {
                                label { "Default OG Image" }
                                div {
                                    input {
                                        r#type: "text",
                                        value: "/uploads/bananabit-logo.png",
                                        placeholder: "Image URL or path"
                                    }
                                    button { "Browse" }
                                }
                            }
                            
                            div {
                                label { "Site Author" }
                                input {
                                    r#type: "text",
                                    value: "BananaBit Team",
                                    placeholder: "Default author name"
                                }
                            }
                        }
                        
                        div {
                            button { "Save Settings" }
                            button { "Reset to Default" }
                        }
                    }
                }
            }
            
            div {
                h3 { "SEO Tools" }
                div {
                    div {
                        h4 { "📊 Analytics Dashboard" }
                        p { "View search engine performance and traffic analytics" }
                        button { "View Analytics" }
                    }
                    
                    div {
                        h4 { "🗺️ Generate Sitemap" }
                        p { "Automatically generate XML sitemap for search engines" }
                        button { "Generate" }
                    }
                    
                    div {
                        h4 { "🤖 Robots.txt" }
                        p { "Configure search engine crawler behavior" }
                        button { "Edit Robots.txt" }
                    }
                    
                    div {
                        h4 { "🔍 SEO Audit" }
                        p { "Analyze your site for SEO best practices" }
                        button { "Run Audit" }
                    }
                }
            }
        }
    }
}

/// Meta tags component to render in document head
#[component]
pub fn MetaTags(meta: SeoMeta) -> Element {
    let og_title = meta.og_title.as_ref().unwrap_or(&meta.title);
    let og_description = meta.og_description.as_ref().unwrap_or(&meta.description);
    let author = meta.author.as_deref().unwrap_or("");
    
    rsx! {
        // Basic meta tags
        title { "{meta.title}" }
        meta { name: "description", content: "{meta.description}" }
        meta { name: "keywords", content: "{meta.keywords}" }
        meta { name: "author", content: "{author}" }
        meta { name: "robots", content: "{meta.robots}" }
        meta { name: "language", content: "{meta.lang}" }
        
        // Open Graph tags
        meta { property: "og:title", content: "{og_title}" }
        meta { property: "og:description", content: "{og_description}" }
        meta { property: "og:type", content: "website" }
        
        if let Some(ref og_image) = meta.og_image {
            meta { property: "og:image", content: "{og_image}" }
        }
        
        // Twitter Card tags
        meta { name: "twitter:card", content: "summary_large_image" }
        meta { name: "twitter:title", content: "{og_title}" }
        meta { name: "twitter:description", content: "{og_description}" }
        
        // Canonical URL
        if let Some(ref canonical) = meta.canonical_url {
            link { rel: "canonical", href: "{canonical}" }
        }
        
        // Additional SEO tags
        meta { name: "viewport", content: "width=device-width, initial-scale=1.0" }
        meta { name: "format-detection", content: "telephone=no" }
    }
}